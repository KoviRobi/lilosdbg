# `lilosdbg`: a wee debugger for `lilos`

This is a _very early prototype_ of a debugger for [`lilos`], my async embedded
operating system. I'm publishing it despite its immaturity to attempt to push
the conversation forward on at-rest debugging of futures generated by `async
fn`.

This is built on top of my DWARF program analysis crate, [`debugdb`].

## How to use it

`lilosdbg` currently can't talk directly to your target over SWD, and instead
relies on a snapshot on disk. (This is deliberate; I want to make sure we can do
snapshot / postmortem debugging, so I'm making sure that use case works great
before attempting live debugging.)

Extract a memory snapshot of your running `lilos` program into a file. Using
`openocd` the command is (address and size for an STM32G030 shown, you will need
to adjust them):

```
dump_image memory-image.bin 0x20000000 8192
```

(If you don't have a `lilos` program, you can also test using the files in the
`demo` directory. There's an ELF file and a saved memory snapshot from one of my
programs.)

Now, run `lildb` with the path to the ELF file for your `lilos` program:

```
cargo run -q --bin lildb YOURPROJECT/target/thumbv6m-none-eabi/yourproject
```

(You'll need to change that path, in case that was unclear.)

At the `lildb` prompt, load your memory image to the right address:

```
load memory-image.bin 0x20000000
```

Then try asking about the status of your tasks by running `tasks`. Example
output from one of my programs:

```
current tick-time is: 1585

task 0:
async fn keybad_fw::serial::task
    suspended at await point 1
waiting on: async fn lilos::spsc::{impl#4}::pop<keybad_fw::scanner::KeyEvent>
    waiting for data in spsc queue at 0x20001cdc
    queue type: lilos::spsc::Queue<keybad_fw::scanner::KeyEvent> <.debug_info+0x00013110>

task 1:
async fn keybad_fw::scanner::task
    suspended at await point 0
waiting on: async fn lilos::exec::{impl#8}::next_time
    suspended at await point 0
waiting on: async fn lilos::exec::sleep_until
    sleeping until: 1586 (1 ms from now)

task 2:
async fn keybad_fw::i2c::task
    suspended at await point 0
waiting on: notify keybad_fw::i2c::EVT
    predicate: keybad_fw::i2c::task::{async_fn#0}::{closure_env#1}
```

Source file and line number information is next on my TODO list.

[`lilos`]: https://github.com/cbiffle/lilos
[`debugdb`]: https://github.com/cbiffle/debugdb
